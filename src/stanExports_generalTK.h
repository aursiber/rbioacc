// Generated by rstantools.  Do not edit by hand.

/*
    rbioacc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rbioacc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rbioacc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_generalTK_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_generalTK");
    reader.add_event(231, 229, "end", "model_generalTK");
    return reader;
}
#include <stan_meta_header.hpp>
class model_generalTK
  : public stan::model::model_base_crtp<model_generalTK> {
private:
        int n_rep;
        int lentp;
        vector_d tp;
        int n_exp;
        matrix_d Cexp;
        std::vector<std::vector<double> > Cobs;
        int n_met;
        std::vector<std::vector<std::vector<double> > > Cmet;
        int n_out;
        std::vector<std::vector<double> > Gobs;
        double gmaxsup;
        int rankacc;
        double tacc;
        double C0;
        double unifMax;
        int len_vtacc;
        int len_vtdep;
        vector_d vtacc;
        vector_d vtdep;
public:
    model_generalTK(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_generalTK(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_generalTK_namespace::model_generalTK";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_rep", "int", context__.to_vec());
            n_rep = int(0);
            vals_i__ = context__.vals_i("n_rep");
            pos__ = 0;
            n_rep = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_rep", n_rep, 0);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "lentp", "int", context__.to_vec());
            lentp = int(0);
            vals_i__ = context__.vals_i("lentp");
            pos__ = 0;
            lentp = vals_i__[pos__++];
            check_greater_or_equal(function__, "lentp", lentp, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("tp", "lentp", lentp);
            context__.validate_dims("data initialization", "tp", "vector_d", context__.to_vec(lentp));
            tp = Eigen::Matrix<double, Eigen::Dynamic, 1>(lentp);
            vals_r__ = context__.vals_r("tp");
            pos__ = 0;
            size_t tp_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < tp_j_1_max__; ++j_1__) {
                tp(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n_exp", "int", context__.to_vec());
            n_exp = int(0);
            vals_i__ = context__.vals_i("n_exp");
            pos__ = 0;
            n_exp = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_exp", n_exp, 0);
            current_statement_begin__ = 11;
            validate_non_negative_index("Cexp", "lentp", lentp);
            validate_non_negative_index("Cexp", "n_exp", n_exp);
            context__.validate_dims("data initialization", "Cexp", "matrix_d", context__.to_vec(lentp,n_exp));
            Cexp = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(lentp, n_exp);
            vals_r__ = context__.vals_r("Cexp");
            pos__ = 0;
            size_t Cexp_j_2_max__ = n_exp;
            size_t Cexp_j_1_max__ = lentp;
            for (size_t j_2__ = 0; j_2__ < Cexp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Cexp_j_1_max__; ++j_1__) {
                    Cexp(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("Cobs", "lentp", lentp);
            validate_non_negative_index("Cobs", "n_rep", n_rep);
            context__.validate_dims("data initialization", "Cobs", "double", context__.to_vec(lentp,n_rep));
            Cobs = std::vector<std::vector<double> >(lentp, std::vector<double>(n_rep, double(0)));
            vals_r__ = context__.vals_r("Cobs");
            pos__ = 0;
            size_t Cobs_k_0_max__ = lentp;
            size_t Cobs_k_1_max__ = n_rep;
            for (size_t k_1__ = 0; k_1__ < Cobs_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Cobs_k_0_max__; ++k_0__) {
                    Cobs[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "n_met", "int", context__.to_vec());
            n_met = int(0);
            vals_i__ = context__.vals_i("n_met");
            pos__ = 0;
            n_met = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_met", n_met, 0);
            current_statement_begin__ = 18;
            validate_non_negative_index("Cmet", "lentp", lentp);
            validate_non_negative_index("Cmet", "n_met", n_met);
            validate_non_negative_index("Cmet", "n_rep", n_rep);
            context__.validate_dims("data initialization", "Cmet", "double", context__.to_vec(lentp,n_met,n_rep));
            Cmet = std::vector<std::vector<std::vector<double> > >(lentp, std::vector<std::vector<double> >(n_met, std::vector<double>(n_rep, double(0))));
            vals_r__ = context__.vals_r("Cmet");
            pos__ = 0;
            size_t Cmet_k_0_max__ = lentp;
            size_t Cmet_k_1_max__ = n_met;
            size_t Cmet_k_2_max__ = n_rep;
            for (size_t k_2__ = 0; k_2__ < Cmet_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < Cmet_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < Cmet_k_0_max__; ++k_0__) {
                        Cmet[k_0__][k_1__][k_2__] = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "n_out", "int", context__.to_vec());
            n_out = int(0);
            vals_i__ = context__.vals_i("n_out");
            pos__ = 0;
            n_out = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_out", n_out, 0);
            current_statement_begin__ = 23;
            validate_non_negative_index("Gobs", "lentp", lentp);
            validate_non_negative_index("Gobs", "n_rep", n_rep);
            context__.validate_dims("data initialization", "Gobs", "double", context__.to_vec(lentp,n_rep));
            Gobs = std::vector<std::vector<double> >(lentp, std::vector<double>(n_rep, double(0)));
            vals_r__ = context__.vals_r("Gobs");
            pos__ = 0;
            size_t Gobs_k_0_max__ = lentp;
            size_t Gobs_k_1_max__ = n_rep;
            for (size_t k_1__ = 0; k_1__ < Gobs_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Gobs_k_0_max__; ++k_0__) {
                    Gobs[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "gmaxsup", "double", context__.to_vec());
            gmaxsup = double(0);
            vals_r__ = context__.vals_r("gmaxsup");
            pos__ = 0;
            gmaxsup = vals_r__[pos__++];
            check_greater_or_equal(function__, "gmaxsup", gmaxsup, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "rankacc", "int", context__.to_vec());
            rankacc = int(0);
            vals_i__ = context__.vals_i("rankacc");
            pos__ = 0;
            rankacc = vals_i__[pos__++];
            check_greater_or_equal(function__, "rankacc", rankacc, 0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "tacc", "double", context__.to_vec());
            tacc = double(0);
            vals_r__ = context__.vals_r("tacc");
            pos__ = 0;
            tacc = vals_r__[pos__++];
            check_greater_or_equal(function__, "tacc", tacc, 0);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "C0", "double", context__.to_vec());
            C0 = double(0);
            vals_r__ = context__.vals_r("C0");
            pos__ = 0;
            C0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "C0", C0, 0);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "unifMax", "double", context__.to_vec());
            unifMax = double(0);
            vals_r__ = context__.vals_r("unifMax");
            pos__ = 0;
            unifMax = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "len_vtacc", "int", context__.to_vec());
            len_vtacc = int(0);
            vals_i__ = context__.vals_i("len_vtacc");
            pos__ = 0;
            len_vtacc = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_vtacc", len_vtacc, 0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "len_vtdep", "int", context__.to_vec());
            len_vtdep = int(0);
            vals_i__ = context__.vals_i("len_vtdep");
            pos__ = 0;
            len_vtdep = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_vtdep", len_vtdep, 0);
            current_statement_begin__ = 36;
            validate_non_negative_index("vtacc", "len_vtacc", len_vtacc);
            context__.validate_dims("data initialization", "vtacc", "vector_d", context__.to_vec(len_vtacc));
            vtacc = Eigen::Matrix<double, Eigen::Dynamic, 1>(len_vtacc);
            vals_r__ = context__.vals_r("vtacc");
            pos__ = 0;
            size_t vtacc_j_1_max__ = len_vtacc;
            for (size_t j_1__ = 0; j_1__ < vtacc_j_1_max__; ++j_1__) {
                vtacc(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("vtdep", "len_vtdep", len_vtdep);
            context__.validate_dims("data initialization", "vtdep", "vector_d", context__.to_vec(len_vtdep));
            vtdep = Eigen::Matrix<double, Eigen::Dynamic, 1>(len_vtdep);
            vals_r__ = context__.vals_r("vtdep");
            pos__ = 0;
            size_t vtdep_j_1_max__ = len_vtdep;
            for (size_t j_1__ = 0; j_1__ < vtdep_j_1_max__; ++j_1__) {
                vtdep(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 40;
            validate_non_negative_index("log10ku", "n_exp", n_exp);
            num_params_r__ += n_exp;
            current_statement_begin__ = 41;
            validate_non_negative_index("log10ke", "n_out", n_out);
            num_params_r__ += n_out;
            current_statement_begin__ = 42;
            validate_non_negative_index("log10km", "n_met", n_met);
            num_params_r__ += n_met;
            current_statement_begin__ = 43;
            validate_non_negative_index("log10kem", "n_met", n_met);
            num_params_r__ += n_met;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            validate_non_negative_index("sigmaCmetpred", "n_met", n_met);
            num_params_r__ += n_met;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
            current_statement_begin__ = 49;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_generalTK() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 40;
        if (!(context__.contains_r("log10ku")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10ku missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10ku");
        pos__ = 0U;
        validate_non_negative_index("log10ku", "n_exp", n_exp);
        context__.validate_dims("parameter initialization", "log10ku", "vector_d", context__.to_vec(n_exp));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10ku(n_exp);
        size_t log10ku_j_1_max__ = n_exp;
        for (size_t j_1__ = 0; j_1__ < log10ku_j_1_max__; ++j_1__) {
            log10ku(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log10ku);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10ku: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("log10ke")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10ke missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10ke");
        pos__ = 0U;
        validate_non_negative_index("log10ke", "n_out", n_out);
        context__.validate_dims("parameter initialization", "log10ke", "vector_d", context__.to_vec(n_out));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10ke(n_out);
        size_t log10ke_j_1_max__ = n_out;
        for (size_t j_1__ = 0; j_1__ < log10ke_j_1_max__; ++j_1__) {
            log10ke(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log10ke);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10ke: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("log10km")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10km missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10km");
        pos__ = 0U;
        validate_non_negative_index("log10km", "n_met", n_met);
        context__.validate_dims("parameter initialization", "log10km", "vector_d", context__.to_vec(n_met));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10km(n_met);
        size_t log10km_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10km_j_1_max__; ++j_1__) {
            log10km(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log10km);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10km: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("log10kem")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10kem missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10kem");
        pos__ = 0U;
        validate_non_negative_index("log10kem", "n_met", n_met);
        context__.validate_dims("parameter initialization", "log10kem", "vector_d", context__.to_vec(n_met));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10kem(n_met);
        size_t log10kem_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10kem_j_1_max__; ++j_1__) {
            log10kem(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log10kem);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10kem: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("sigmaCpred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaCpred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaCpred");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaCpred", "double", context__.to_vec());
        double sigmaCpred(0);
        sigmaCpred = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaCpred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaCpred: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("sigmaCmetpred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaCmetpred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaCmetpred");
        pos__ = 0U;
        validate_non_negative_index("sigmaCmetpred", "n_met", n_met);
        context__.validate_dims("parameter initialization", "sigmaCmetpred", "vector_d", context__.to_vec(n_met));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmaCmetpred(n_met);
        size_t sigmaCmetpred_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < sigmaCmetpred_j_1_max__; ++j_1__) {
            sigmaCmetpred(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigmaCmetpred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaCmetpred: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("sigmaGpred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmaGpred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmaGpred");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmaGpred", "double", context__.to_vec());
        double sigmaGpred(0);
        sigmaGpred = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmaGpred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmaGpred: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("gmax")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gmax missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gmax");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gmax", "double", context__.to_vec());
        double gmax(0);
        gmax = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, gmax);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gmax: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("G0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable G0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("G0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "G0", "double", context__.to_vec());
        double G0(0);
        G0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, G0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable G0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 40;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log10ku;
            (void) log10ku;  // dummy to suppress unused var warning
            if (jacobian__)
                log10ku = in__.vector_constrain(n_exp, lp__);
            else
                log10ku = in__.vector_constrain(n_exp);
            current_statement_begin__ = 41;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log10ke;
            (void) log10ke;  // dummy to suppress unused var warning
            if (jacobian__)
                log10ke = in__.vector_constrain(n_out, lp__);
            else
                log10ke = in__.vector_constrain(n_out);
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log10km;
            (void) log10km;  // dummy to suppress unused var warning
            if (jacobian__)
                log10km = in__.vector_constrain(n_met, lp__);
            else
                log10km = in__.vector_constrain(n_met);
            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log10kem;
            (void) log10kem;  // dummy to suppress unused var warning
            if (jacobian__)
                log10kem = in__.vector_constrain(n_met, lp__);
            else
                log10kem = in__.vector_constrain(n_met);
            current_statement_begin__ = 45;
            local_scalar_t__ sigmaCpred;
            (void) sigmaCpred;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaCpred = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaCpred = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigmaCmetpred;
            (void) sigmaCmetpred;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaCmetpred = in__.vector_lb_constrain(0, n_met, lp__);
            else
                sigmaCmetpred = in__.vector_lb_constrain(0, n_met);
            current_statement_begin__ = 47;
            local_scalar_t__ sigmaGpred;
            (void) sigmaGpred;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaGpred = in__.scalar_lb_constrain(0, lp__);
            else
                sigmaGpred = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 49;
            local_scalar_t__ gmax;
            (void) gmax;  // dummy to suppress unused var warning
            if (jacobian__)
                gmax = in__.scalar_lb_constrain(0, lp__);
            else
                gmax = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 50;
            local_scalar_t__ G0;
            (void) G0;  // dummy to suppress unused var warning
            if (jacobian__)
                G0 = in__.scalar_lb_constrain(0, lp__);
            else
                G0 = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("ku", "n_exp", n_exp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ku(n_exp);
            stan::math::initialize(ku, DUMMY_VAR__);
            stan::math::fill(ku, DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("ke", "n_out", n_out);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ke(n_out);
            stan::math::initialize(ke, DUMMY_VAR__);
            stan::math::fill(ke, DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("km", "n_met", n_met);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> km(n_met);
            stan::math::initialize(km, DUMMY_VAR__);
            stan::math::fill(km, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("kem", "n_met", n_met);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> kem(n_met);
            stan::math::initialize(kem, DUMMY_VAR__);
            stan::math::fill(kem, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("U", "lentp", lentp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> U(lentp);
            stan::math::initialize(U, DUMMY_VAR__);
            stan::math::fill(U, DUMMY_VAR__);
            current_statement_begin__ = 60;
            local_scalar_t__ M;
            (void) M;  // dummy to suppress unused var warning
            stan::math::initialize(M, DUMMY_VAR__);
            stan::math::fill(M, DUMMY_VAR__);
            current_statement_begin__ = 61;
            local_scalar_t__ E;
            (void) E;  // dummy to suppress unused var warning
            stan::math::initialize(E, DUMMY_VAR__);
            stan::math::fill(E, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("R", "lentp", lentp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R(lentp);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("D", "n_met", n_met);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> D(n_met);
            stan::math::initialize(D, DUMMY_VAR__);
            stan::math::fill(D, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("CGpred", "lentp", lentp);
            validate_non_negative_index("CGpred", "n_out", n_out);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> CGpred(lentp, n_out);
            stan::math::initialize(CGpred, DUMMY_VAR__);
            stan::math::fill(CGpred, DUMMY_VAR__);
            current_statement_begin__ = 66;
            validate_non_negative_index("Cmetpred", "lentp", lentp);
            validate_non_negative_index("Cmetpred", "n_met", n_met);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Cmetpred(lentp, n_met);
            stan::math::initialize(Cmetpred, DUMMY_VAR__);
            stan::math::fill(Cmetpred, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 68;
            for (int i = 1; i <= n_exp; ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(ku, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10ku, i, "log10ku", 1)), 
                            "assigning variable ku");
            }
            current_statement_begin__ = 71;
            for (int i = 1; i <= n_out; ++i) {
                current_statement_begin__ = 72;
                stan::model::assign(ke, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10ke, i, "log10ke", 1)), 
                            "assigning variable ke");
            }
            current_statement_begin__ = 74;
            for (int i = 1; i <= n_met; ++i) {
                current_statement_begin__ = 75;
                stan::model::assign(km, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10km, i, "log10km", 1)), 
                            "assigning variable km");
                current_statement_begin__ = 76;
                stan::model::assign(kem, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10kem, i, "log10kem", 1)), 
                            "assigning variable kem");
            }
            current_statement_begin__ = 78;
            if (as_bool(logical_eq(n_met, 0))) {
                current_statement_begin__ = 79;
                stan::math::assign(M, 0);
            } else {
                current_statement_begin__ = 81;
                stan::math::assign(M, sum(km));
            }
            current_statement_begin__ = 83;
            stan::math::assign(E, sum(ke));
            current_statement_begin__ = 84;
            for (int t = 1; t <= lentp; ++t) {
                current_statement_begin__ = 86;
                stan::model::assign(U, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply(stan::model::rvalue(Cexp, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, n_exp), stan::model::nil_index_list())), "Cexp"), ku), 
                            "assigning variable U");
                current_statement_begin__ = 87;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(U, t, "U", 1) / (E + M)), 
                            "assigning variable R");
            }
            current_statement_begin__ = 89;
            for (int i = 1; i <= n_met; ++i) {
                current_statement_begin__ = 90;
                stan::model::assign(D, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(kem, i, "kem", 1) - (E + M)), 
                            "assigning variable D");
            }
            current_statement_begin__ = 93;
            for (int t = 1; t <= rankacc; ++t) {
                current_statement_begin__ = 95;
                stan::model::assign(CGpred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (((C0 - get_base1(R, t, "R", 1)) * stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1)))) + get_base1(R, t, "R", 1)), 
                            "assigning variable CGpred");
                current_statement_begin__ = 97;
                if (as_bool(logical_gt(n_met, 0))) {
                    current_statement_begin__ = 98;
                    for (int i = 1; i <= n_met; ++i) {
                        current_statement_begin__ = 99;
                        stan::model::assign(Cmetpred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    (get_base1(km, i, "km", 1) * ((((C0 - get_base1(R, t, "R", 1)) / get_base1(D, i, "D", 1)) * (stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * get_base1(tp, t, "tp", 1))))) + ((get_base1(R, t, "R", 1) / get_base1(kem, i, "kem", 1)) * (1 - stan::math::exp(-((get_base1(kem, i, "kem", 1) * get_base1(tp, t, "tp", 1)))))))), 
                                    "assigning variable Cmetpred");
                    }
                }
            }
            current_statement_begin__ = 106;
            for (int t = (rankacc + 1); t <= lentp; ++t) {
                current_statement_begin__ = 108;
                stan::model::assign(CGpred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((C0 - (get_base1(R, t, "R", 1) * (1 - stan::math::exp(((E + M) * tacc))))) * stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1)))), 
                            "assigning variable CGpred");
                current_statement_begin__ = 110;
                if (as_bool(logical_gt(n_met, 0))) {
                    current_statement_begin__ = 111;
                    for (int i = 1; i <= n_met; ++i) {
                        current_statement_begin__ = 112;
                        stan::model::assign(Cmetpred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    (get_base1(km, i, "km", 1) * (((((C0 - get_base1(R, t, "R", 1)) / get_base1(D, i, "D", 1)) * (stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * get_base1(tp, t, "tp", 1))))) + ((get_base1(R, t, "R", 1) / get_base1(kem, i, "kem", 1)) * (stan::math::exp((-(get_base1(kem, i, "kem", 1)) * (get_base1(tp, t, "tp", 1) - tacc))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * get_base1(tp, t, "tp", 1)))))) + ((get_base1(R, t, "R", 1) / get_base1(D, i, "D", 1)) * (stan::math::exp((-((E + M)) * (get_base1(tp, t, "tp", 1) - tacc))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * (get_base1(tp, t, "tp", 1) - tacc))))))), 
                                    "assigning variable Cmetpred");
                    }
                }
            }
            current_statement_begin__ = 121;
            if (as_bool(logical_eq(n_out, 2))) {
                current_statement_begin__ = 122;
                for (int t = 1; t <= lentp; ++t) {
                    current_statement_begin__ = 123;
                    stan::model::assign(CGpred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                (((G0 - gmax) * stan::math::exp((-(get_base1(ke, 2, "ke", 1)) * get_base1(tp, t, "tp", 1)))) + gmax), 
                                "assigning variable CGpred");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 55;
            size_t ku_j_1_max__ = n_exp;
            for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ku(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ku" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ku: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "ku", ku, 0);
            current_statement_begin__ = 56;
            size_t ke_j_1_max__ = n_out;
            for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(ke(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ke" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ke: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "ke", ke, 0);
            current_statement_begin__ = 57;
            size_t km_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < km_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(km(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: km" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable km: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "km", km, 0);
            current_statement_begin__ = 58;
            size_t kem_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < kem_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(kem(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: kem" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable kem: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "kem", kem, 0);
            current_statement_begin__ = 59;
            size_t U_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(U(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: U" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable U: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 60;
            if (stan::math::is_uninitialized(M)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: M";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable M: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 61;
            if (stan::math::is_uninitialized(E)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: E";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable E: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 62;
            size_t R_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(R(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 63;
            size_t D_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(D(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: D" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable D: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 65;
            size_t CGpred_j_1_max__ = lentp;
            size_t CGpred_j_2_max__ = n_out;
            for (size_t j_1__ = 0; j_1__ < CGpred_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < CGpred_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(CGpred(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: CGpred" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable CGpred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 66;
            size_t Cmetpred_j_1_max__ = lentp;
            size_t Cmetpred_j_2_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < Cmetpred_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Cmetpred_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Cmetpred(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Cmetpred" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Cmetpred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 130;
            lp_accum__.add(uniform_log(log10ku, -(5), 5));
            current_statement_begin__ = 131;
            lp_accum__.add(uniform_log(log10ke, -(5), 5));
            current_statement_begin__ = 132;
            lp_accum__.add(uniform_log(log10km, -(5), 5));
            current_statement_begin__ = 133;
            lp_accum__.add(uniform_log(log10kem, -(5), 5));
            current_statement_begin__ = 134;
            lp_accum__.add(uniform_log(sigmaCpred, 0, unifMax));
            current_statement_begin__ = 135;
            lp_accum__.add(uniform_log(sigmaCmetpred, 0, unifMax));
            current_statement_begin__ = 136;
            if (as_bool(logical_eq(n_out, 2))) {
                current_statement_begin__ = 137;
                lp_accum__.add(uniform_log(sigmaGpred, 0, unifMax));
                current_statement_begin__ = 138;
                lp_accum__.add(uniform_log(gmax, (gmaxsup / 6), gmaxsup));
                current_statement_begin__ = 139;
                lp_accum__.add(uniform_log(G0, 0, gmaxsup));
            }
            current_statement_begin__ = 142;
            for (int rep = 1; rep <= n_rep; ++rep) {
                current_statement_begin__ = 144;
                for (int t = 1; t <= rankacc; ++t) {
                    current_statement_begin__ = 146;
                    if (as_bool(logical_negation(is_inf(get_base1(get_base1(Cobs, t, "Cobs", 1), rep, "Cobs", 2))))) {
                        current_statement_begin__ = 147;
                        lp_accum__.add(normal_log(get_base1(get_base1(Cobs, t, "Cobs", 1), rep, "Cobs", 2), get_base1(CGpred, t, 1, "CGpred", 1), sigmaCpred));
                    }
                    current_statement_begin__ = 150;
                    for (int i = 1; i <= n_met; ++i) {
                        current_statement_begin__ = 151;
                        if (as_bool(logical_negation(is_inf(get_base1(get_base1(get_base1(Cmet, t, "Cmet", 1), i, "Cmet", 2), rep, "Cmet", 3))))) {
                            current_statement_begin__ = 152;
                            lp_accum__.add(normal_log(get_base1(get_base1(get_base1(Cmet, t, "Cmet", 1), i, "Cmet", 2), rep, "Cmet", 3), get_base1(Cmetpred, t, "Cmetpred", 1), get_base1(sigmaCmetpred, i, "sigmaCmetpred", 1)));
                        }
                    }
                }
                current_statement_begin__ = 157;
                for (int t = (rankacc + 1); t <= lentp; ++t) {
                    current_statement_begin__ = 159;
                    if (as_bool(logical_negation(is_inf(get_base1(get_base1(Cobs, t, "Cobs", 1), rep, "Cobs", 2))))) {
                        current_statement_begin__ = 160;
                        lp_accum__.add(normal_log(get_base1(get_base1(Cobs, t, "Cobs", 1), rep, "Cobs", 2), get_base1(CGpred, t, 1, "CGpred", 1), sigmaCpred));
                    }
                    current_statement_begin__ = 163;
                    for (int i = 1; i <= n_met; ++i) {
                        current_statement_begin__ = 164;
                        if (as_bool(logical_negation(is_inf(get_base1(get_base1(get_base1(Cmet, t, "Cmet", 1), i, "Cmet", 2), rep, "Cmet", 3))))) {
                            current_statement_begin__ = 165;
                            lp_accum__.add(normal_log(get_base1(get_base1(get_base1(Cmet, t, "Cmet", 1), i, "Cmet", 2), rep, "Cmet", 3), get_base1(Cmetpred, t, "Cmetpred", 1), get_base1(sigmaCmetpred, i, "sigmaCmetpred", 1)));
                        }
                    }
                }
                current_statement_begin__ = 169;
                if (as_bool(logical_eq(n_out, 2))) {
                    current_statement_begin__ = 170;
                    for (int t = 1; t <= lentp; ++t) {
                        current_statement_begin__ = 171;
                        if (as_bool(logical_negation(is_inf(get_base1(get_base1(Gobs, t, "Gobs", 1), rep, "Gobs", 2))))) {
                            current_statement_begin__ = 172;
                            lp_accum__.add(normal_log(get_base1(get_base1(Gobs, t, "Gobs", 1), rep, "Gobs", 2), get_base1(CGpred, t, 2, "CGpred", 1), sigmaGpred));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log10ku");
        names__.push_back("log10ke");
        names__.push_back("log10km");
        names__.push_back("log10kem");
        names__.push_back("sigmaCpred");
        names__.push_back("sigmaCmetpred");
        names__.push_back("sigmaGpred");
        names__.push_back("gmax");
        names__.push_back("G0");
        names__.push_back("ku");
        names__.push_back("ke");
        names__.push_back("km");
        names__.push_back("kem");
        names__.push_back("U");
        names__.push_back("M");
        names__.push_back("E");
        names__.push_back("R");
        names__.push_back("D");
        names__.push_back("CGpred");
        names__.push_back("Cmetpred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_exp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_out);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_exp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_out);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(lentp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(lentp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(lentp);
        dims__.push_back(n_out);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(lentp);
        dims__.push_back(n_met);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_generalTK_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10ku = in__.vector_constrain(n_exp);
        size_t log10ku_j_1_max__ = n_exp;
        for (size_t j_1__ = 0; j_1__ < log10ku_j_1_max__; ++j_1__) {
            vars__.push_back(log10ku(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10ke = in__.vector_constrain(n_out);
        size_t log10ke_j_1_max__ = n_out;
        for (size_t j_1__ = 0; j_1__ < log10ke_j_1_max__; ++j_1__) {
            vars__.push_back(log10ke(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10km = in__.vector_constrain(n_met);
        size_t log10km_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10km_j_1_max__; ++j_1__) {
            vars__.push_back(log10km(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> log10kem = in__.vector_constrain(n_met);
        size_t log10kem_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10kem_j_1_max__; ++j_1__) {
            vars__.push_back(log10kem(j_1__));
        }
        double sigmaCpred = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaCpred);
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigmaCmetpred = in__.vector_lb_constrain(0, n_met);
        size_t sigmaCmetpred_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < sigmaCmetpred_j_1_max__; ++j_1__) {
            vars__.push_back(sigmaCmetpred(j_1__));
        }
        double sigmaGpred = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmaGpred);
        double gmax = in__.scalar_lb_constrain(0);
        vars__.push_back(gmax);
        double G0 = in__.scalar_lb_constrain(0);
        vars__.push_back(G0);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("ku", "n_exp", n_exp);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ku(n_exp);
            stan::math::initialize(ku, DUMMY_VAR__);
            stan::math::fill(ku, DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("ke", "n_out", n_out);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ke(n_out);
            stan::math::initialize(ke, DUMMY_VAR__);
            stan::math::fill(ke, DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("km", "n_met", n_met);
            Eigen::Matrix<double, Eigen::Dynamic, 1> km(n_met);
            stan::math::initialize(km, DUMMY_VAR__);
            stan::math::fill(km, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("kem", "n_met", n_met);
            Eigen::Matrix<double, Eigen::Dynamic, 1> kem(n_met);
            stan::math::initialize(kem, DUMMY_VAR__);
            stan::math::fill(kem, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("U", "lentp", lentp);
            Eigen::Matrix<double, Eigen::Dynamic, 1> U(lentp);
            stan::math::initialize(U, DUMMY_VAR__);
            stan::math::fill(U, DUMMY_VAR__);
            current_statement_begin__ = 60;
            double M;
            (void) M;  // dummy to suppress unused var warning
            stan::math::initialize(M, DUMMY_VAR__);
            stan::math::fill(M, DUMMY_VAR__);
            current_statement_begin__ = 61;
            double E;
            (void) E;  // dummy to suppress unused var warning
            stan::math::initialize(E, DUMMY_VAR__);
            stan::math::fill(E, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("R", "lentp", lentp);
            Eigen::Matrix<double, Eigen::Dynamic, 1> R(lentp);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("D", "n_met", n_met);
            Eigen::Matrix<double, Eigen::Dynamic, 1> D(n_met);
            stan::math::initialize(D, DUMMY_VAR__);
            stan::math::fill(D, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("CGpred", "lentp", lentp);
            validate_non_negative_index("CGpred", "n_out", n_out);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> CGpred(lentp, n_out);
            stan::math::initialize(CGpred, DUMMY_VAR__);
            stan::math::fill(CGpred, DUMMY_VAR__);
            current_statement_begin__ = 66;
            validate_non_negative_index("Cmetpred", "lentp", lentp);
            validate_non_negative_index("Cmetpred", "n_met", n_met);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Cmetpred(lentp, n_met);
            stan::math::initialize(Cmetpred, DUMMY_VAR__);
            stan::math::fill(Cmetpred, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 68;
            for (int i = 1; i <= n_exp; ++i) {
                current_statement_begin__ = 69;
                stan::model::assign(ku, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10ku, i, "log10ku", 1)), 
                            "assigning variable ku");
            }
            current_statement_begin__ = 71;
            for (int i = 1; i <= n_out; ++i) {
                current_statement_begin__ = 72;
                stan::model::assign(ke, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10ke, i, "log10ke", 1)), 
                            "assigning variable ke");
            }
            current_statement_begin__ = 74;
            for (int i = 1; i <= n_met; ++i) {
                current_statement_begin__ = 75;
                stan::model::assign(km, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10km, i, "log10km", 1)), 
                            "assigning variable km");
                current_statement_begin__ = 76;
                stan::model::assign(kem, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            pow(10, get_base1(log10kem, i, "log10kem", 1)), 
                            "assigning variable kem");
            }
            current_statement_begin__ = 78;
            if (as_bool(logical_eq(n_met, 0))) {
                current_statement_begin__ = 79;
                stan::math::assign(M, 0);
            } else {
                current_statement_begin__ = 81;
                stan::math::assign(M, sum(km));
            }
            current_statement_begin__ = 83;
            stan::math::assign(E, sum(ke));
            current_statement_begin__ = 84;
            for (int t = 1; t <= lentp; ++t) {
                current_statement_begin__ = 86;
                stan::model::assign(U, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply(stan::model::rvalue(Cexp, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, n_exp), stan::model::nil_index_list())), "Cexp"), ku), 
                            "assigning variable U");
                current_statement_begin__ = 87;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(U, t, "U", 1) / (E + M)), 
                            "assigning variable R");
            }
            current_statement_begin__ = 89;
            for (int i = 1; i <= n_met; ++i) {
                current_statement_begin__ = 90;
                stan::model::assign(D, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(kem, i, "kem", 1) - (E + M)), 
                            "assigning variable D");
            }
            current_statement_begin__ = 93;
            for (int t = 1; t <= rankacc; ++t) {
                current_statement_begin__ = 95;
                stan::model::assign(CGpred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (((C0 - get_base1(R, t, "R", 1)) * stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1)))) + get_base1(R, t, "R", 1)), 
                            "assigning variable CGpred");
                current_statement_begin__ = 97;
                if (as_bool(logical_gt(n_met, 0))) {
                    current_statement_begin__ = 98;
                    for (int i = 1; i <= n_met; ++i) {
                        current_statement_begin__ = 99;
                        stan::model::assign(Cmetpred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    (get_base1(km, i, "km", 1) * ((((C0 - get_base1(R, t, "R", 1)) / get_base1(D, i, "D", 1)) * (stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * get_base1(tp, t, "tp", 1))))) + ((get_base1(R, t, "R", 1) / get_base1(kem, i, "kem", 1)) * (1 - stan::math::exp(-((get_base1(kem, i, "kem", 1) * get_base1(tp, t, "tp", 1)))))))), 
                                    "assigning variable Cmetpred");
                    }
                }
            }
            current_statement_begin__ = 106;
            for (int t = (rankacc + 1); t <= lentp; ++t) {
                current_statement_begin__ = 108;
                stan::model::assign(CGpred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            ((C0 - (get_base1(R, t, "R", 1) * (1 - stan::math::exp(((E + M) * tacc))))) * stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1)))), 
                            "assigning variable CGpred");
                current_statement_begin__ = 110;
                if (as_bool(logical_gt(n_met, 0))) {
                    current_statement_begin__ = 111;
                    for (int i = 1; i <= n_met; ++i) {
                        current_statement_begin__ = 112;
                        stan::model::assign(Cmetpred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    (get_base1(km, i, "km", 1) * (((((C0 - get_base1(R, t, "R", 1)) / get_base1(D, i, "D", 1)) * (stan::math::exp((-((E + M)) * get_base1(tp, t, "tp", 1))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * get_base1(tp, t, "tp", 1))))) + ((get_base1(R, t, "R", 1) / get_base1(kem, i, "kem", 1)) * (stan::math::exp((-(get_base1(kem, i, "kem", 1)) * (get_base1(tp, t, "tp", 1) - tacc))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * get_base1(tp, t, "tp", 1)))))) + ((get_base1(R, t, "R", 1) / get_base1(D, i, "D", 1)) * (stan::math::exp((-((E + M)) * (get_base1(tp, t, "tp", 1) - tacc))) - stan::math::exp((-(get_base1(kem, i, "kem", 1)) * (get_base1(tp, t, "tp", 1) - tacc))))))), 
                                    "assigning variable Cmetpred");
                    }
                }
            }
            current_statement_begin__ = 121;
            if (as_bool(logical_eq(n_out, 2))) {
                current_statement_begin__ = 122;
                for (int t = 1; t <= lentp; ++t) {
                    current_statement_begin__ = 123;
                    stan::model::assign(CGpred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                (((G0 - gmax) * stan::math::exp((-(get_base1(ke, 2, "ke", 1)) * get_base1(tp, t, "tp", 1)))) + gmax), 
                                "assigning variable CGpred");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 55;
            check_greater_or_equal(function__, "ku", ku, 0);
            current_statement_begin__ = 56;
            check_greater_or_equal(function__, "ke", ke, 0);
            current_statement_begin__ = 57;
            check_greater_or_equal(function__, "km", km, 0);
            current_statement_begin__ = 58;
            check_greater_or_equal(function__, "kem", kem, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t ku_j_1_max__ = n_exp;
                for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                    vars__.push_back(ku(j_1__));
                }
                size_t ke_j_1_max__ = n_out;
                for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                    vars__.push_back(ke(j_1__));
                }
                size_t km_j_1_max__ = n_met;
                for (size_t j_1__ = 0; j_1__ < km_j_1_max__; ++j_1__) {
                    vars__.push_back(km(j_1__));
                }
                size_t kem_j_1_max__ = n_met;
                for (size_t j_1__ = 0; j_1__ < kem_j_1_max__; ++j_1__) {
                    vars__.push_back(kem(j_1__));
                }
                size_t U_j_1_max__ = lentp;
                for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
                    vars__.push_back(U(j_1__));
                }
                vars__.push_back(M);
                vars__.push_back(E);
                size_t R_j_1_max__ = lentp;
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    vars__.push_back(R(j_1__));
                }
                size_t D_j_1_max__ = n_met;
                for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
                    vars__.push_back(D(j_1__));
                }
                size_t CGpred_j_2_max__ = n_out;
                size_t CGpred_j_1_max__ = lentp;
                for (size_t j_2__ = 0; j_2__ < CGpred_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < CGpred_j_1_max__; ++j_1__) {
                        vars__.push_back(CGpred(j_1__, j_2__));
                    }
                }
                size_t Cmetpred_j_2_max__ = n_met;
                size_t Cmetpred_j_1_max__ = lentp;
                for (size_t j_2__ = 0; j_2__ < Cmetpred_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Cmetpred_j_1_max__; ++j_1__) {
                        vars__.push_back(Cmetpred(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_generalTK";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log10ku_j_1_max__ = n_exp;
        for (size_t j_1__ = 0; j_1__ < log10ku_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ku" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10ke_j_1_max__ = n_out;
        for (size_t j_1__ = 0; j_1__ < log10ke_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ke" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10km_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10km_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10km" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10kem_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10kem_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10kem" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaCpred";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaCmetpred_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < sigmaCmetpred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaCmetpred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaGpred";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gmax";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "G0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t ku_j_1_max__ = n_exp;
            for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ku" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ke_j_1_max__ = n_out;
            for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ke" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t km_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < km_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "km" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t kem_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < kem_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kem" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t U_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "U" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "M";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "E";
            param_names__.push_back(param_name_stream__.str());
            size_t R_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t D_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "D" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t CGpred_j_2_max__ = n_out;
            size_t CGpred_j_1_max__ = lentp;
            for (size_t j_2__ = 0; j_2__ < CGpred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < CGpred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "CGpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Cmetpred_j_2_max__ = n_met;
            size_t Cmetpred_j_1_max__ = lentp;
            for (size_t j_2__ = 0; j_2__ < Cmetpred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Cmetpred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Cmetpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log10ku_j_1_max__ = n_exp;
        for (size_t j_1__ = 0; j_1__ < log10ku_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ku" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10ke_j_1_max__ = n_out;
        for (size_t j_1__ = 0; j_1__ < log10ke_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10ke" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10km_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10km_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10km" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log10kem_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < log10kem_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log10kem" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaCpred";
        param_names__.push_back(param_name_stream__.str());
        size_t sigmaCmetpred_j_1_max__ = n_met;
        for (size_t j_1__ = 0; j_1__ < sigmaCmetpred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigmaCmetpred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaGpred";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gmax";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "G0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t ku_j_1_max__ = n_exp;
            for (size_t j_1__ = 0; j_1__ < ku_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ku" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t ke_j_1_max__ = n_out;
            for (size_t j_1__ = 0; j_1__ < ke_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ke" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t km_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < km_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "km" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t kem_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < kem_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kem" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t U_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "U" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "M";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "E";
            param_names__.push_back(param_name_stream__.str());
            size_t R_j_1_max__ = lentp;
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t D_j_1_max__ = n_met;
            for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "D" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t CGpred_j_2_max__ = n_out;
            size_t CGpred_j_1_max__ = lentp;
            for (size_t j_2__ = 0; j_2__ < CGpred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < CGpred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "CGpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Cmetpred_j_2_max__ = n_met;
            size_t Cmetpred_j_1_max__ = lentp;
            for (size_t j_2__ = 0; j_2__ < Cmetpred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Cmetpred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Cmetpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_generalTK_namespace::model_generalTK stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
